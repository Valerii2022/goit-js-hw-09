{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SA4CU,IAAIC,SAAQ,SAACC,EAASC,GAC9B,IAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,YAAW,WACLH,GACFF,EAJW,IAMbC,EALU,I,GAMT,I,IAGHK,MAAK,SAAAC,GAAYC,EAAAX,GAASY,OAAOC,QAAQ,qBAA8BC,OAATJ,EAAS,M,IAAQK,OAAM,SAAAC,GAASL,EAAAX,GAASY,OAAOK,QAAQ,oBAA0BH,OAANE,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n// };\n// refs.form.addEventListener('submit', createPromise);\n\n// let timerId = null;\n// let position = 0;\n\n// function createPromise(event) {\n//   event.preventDefault();\n//   const amount = Number(refs.form.elements.amount.value);\n//   let delay = Number(refs.form.elements.delay.value);\n//   let step = 0;\n\n//   timerId = setInterval(() => {\n//     position += 1;\n//     step = Number(refs.form.elements.step.value);\n//     delay += step;\n\n//     return new Promise((resolve, reject) => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve(`Fulfilled promise ${position} in ${delay}ms`);\n//         Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         reject(`Rejected promise ${position} in ${delay}ms`);\n//         Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//       if (position === amount) {\n//         position = 0;\n//         clearInterval(timerId);\n//         return;\n//       }\n//     });\n//   }, delay + step);\n// }\n\n// // timerId = setInterval(() => {}, delay + step);\n\n\nconst p = new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n  let position = 15;\n  let delay = 250;\n  setTimeout(() => {\n    if (shouldResolve) {\n      resolve(position);\n    }\n    reject(delay)\n  }, 500)\n})\n\np.then(position=> {Notiflix.Notify.success(`Fulfilled promise ${position}ms`);}).catch(delay =>{Notiflix.Notify.failure(`Rejected promise ${delay}`);});"],"names":["$6JpON","parcelRequire","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","position","$parcel$interopDefault","Notify","success","concat","catch","delay","failure"],"version":3,"file":"03-promises.884a5918.js.map"}