{"mappings":"gfAAAA,EAAA,SAEA,IAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAG/BH,EAAKC,KAAKG,iBAAiB,UA2F3B,SAAuBC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAEjBC,aAAY,WAAM,G,OARnBC,OAAOb,EAAKC,KAAKa,SAASC,OAAOC,OAChCH,OAAOb,EAAKC,KAAKa,SAASR,MAAMU,OACjCH,OAAOb,EAAKC,KAAKa,SAASG,KAAKD,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', createPromise);\n\nlet timerId = null;\n\n// let delay;\n// let position = 0;\n// let amount;\n\n// function handleFormSubmit(event) {\n//   event.preventDefault();\n//   delay = Number(refs.form.elements.delay.value);\n\n//   timerId = setInterval(() => {\n//     const shouldResolve = Math.random() > 0.3;\n//     amount = Number(refs.form.elements.amount.value);\n//     delay += Number(refs.form.elements.step.value);\n//     position += 1;\n//     if (position === amount) {\n//       clearInterval(timerId);\n//     }\n//     if (shouldResolve) {\n//       Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n//       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     } else {\n//       Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n//       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//     }\n//   }, delay);\n// }\n\n// let delay = refs.form.elements.delay.value + refs.form.elements.step.value\n\n// timerId = setInterval(() => {\n// console.log('hi')\n// }, delay);\n\n// clearInterval(timerId);\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   amount = Number(refs.form.elements.amount.value);\n//   delay += Number(refs.form.elements.step.value);\n//   position += 1;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// ------------------------------------------------------------\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n//     }\n//     reject('Промис выполнился с ошибкой (отклонён, rejected)');\n//   }, 500);\n// });\n\n// promise.then(onFulfilled).catch(onRejected);\n\n// function onFulfilled(result) {\n//   console.log('onFulfilled -> onFulfilled');\n//   Notiflix.Notify.success(`${result}`);\n//   console.log(`✅ ${result}`);\n// }\n\n// function onRejected(error) {\n//   console.log('onRejected -> onRejected');\n//   Notiflix.Notify.failure(`${error}`);\n//   console.log(`❌ ${error}`);\n// }\n\n// ---------------------------------------------------------------\n\nlet position = 0;\nlet amount = Number(refs.form.elements.amount.value);\nconst delay = Number(refs.form.elements.delay.value);\nconst step = Number(refs.form.elements.step.value);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    timerId = setInterval(() => {});\n\n    if (shouldResolve) {\n      // Fulfill\n    } else {\n      // Reject\n    }\n  });\n}\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","addEventListener","position","delay","Promise","resolve","reject","Math","random","setInterval","Number","elements","amount","value","step"],"version":3,"file":"03-promises.fa74d4d8.js.map"}