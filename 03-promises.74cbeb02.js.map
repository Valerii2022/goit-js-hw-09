{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAgCIC,EAAU,KACVC,EAAW,EACTC,EAAQ,IAGJ,IAAIC,SAAQ,SAACC,EAASC,GAC9B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCR,EAAUS,aAAY,WACpBR,GAAY,EAERK,EACFF,EAAQ,CAAEM,SAAAT,EAAUU,MAAAT,IAEpBG,EAAO,CAAEK,SAAAT,EAAUU,MAAAT,IAXV,IAaPD,GACFW,cAAcZ,E,GAGfE,E,IAGHW,MAAK,SAAAC,G,IAAGC,EAAQD,EAARJ,SAAUM,EAAKF,EAALH,MAClBM,EAAAnB,GAASoB,OAAOC,QAAQ,qBAAoCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,OAClEK,QAAQC,IAAI,uBAAwCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IACzDO,OAAM,SAAAT,G,IAAGU,EAAQV,EAARJ,SAAUe,EAAKX,EAALH,MACpBM,EAAAnB,GAASoB,OAAOQ,QAAQ,oBAAmCN,OAAfI,EAAS,QAAYJ,OAANK,EAAM,OACjEJ,QAAQC,IAAI,sBAAqCF,OAAfI,EAAS,QAAYJ,OAANK,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n// };\n\n// refs.form.addEventListener('submit', createPromise);\n\n// let timerId = null;\n// let position = 10;\n// const delay = Number(refs.form.elements.delay.value);\n\n// function createPromise() {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       resolve({ position, delay });\n//     }\n//     reject({ position, delay });\n//   }, delay);\n// }\n\n// createPromise()\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nlet timerId = null;\nlet position = 0;\nconst delay = 1000;\nconst amount = 5;\n\nconst p = new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n\n  timerId = setInterval(() => {\n    position += 1;\n\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n    if (position === amount) {\n      clearInterval(timerId);\n      return;\n    }\n  }, delay);\n});\n\np.then(({ position, delay }) => {\n  Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}).catch(({ position, delay }) => {\n  Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$timerId","$ce04d3a99e08e73b$var$position","$ce04d3a99e08e73b$var$delay","Promise","resolve","reject","shouldResolve","Math","random","setInterval","position","delay","clearInterval","then","param","position1","delay1","$parcel$interopDefault","Notify","success","concat","console","log","catch","position2","delay2","failure"],"version":3,"file":"03-promises.74cbeb02.js.map"}