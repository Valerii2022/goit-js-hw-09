{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAmD3B,SAAuBC,GACrBA,EAAMC,gB,IA1BR,IAAIC,EAAU,KAERC,EAAW,EACf,MAIIC,EAAI,IAAIC,SAAQ,CAACC,EAASC,KAC9B,MAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,aAAY,KACVR,GAAY,EACXK,EACCF,EAAQ,C,SAAEH,E,MAXA,MAaVI,EAAO,C,SAAEJ,E,MAbC,KAaiB,GAbjB,IAeL,IAiBRD,EAAUS,aAAY,KAGvBP,EAAEQ,MAAK,EAAGC,SAAAC,EAAUC,MAAAC,MACpBC,EAAAvB,GAASwB,OAAOC,QAAQ,qBAAqBL,QAAeE,OAC5DI,QAAQC,IAAI,uBAAqBP,QAAiBE,MAAU,IAC3DM,OAAM,EAAGT,SAAAU,EAAUR,MAAAS,MACpBP,EAAAvB,GAASwB,OAAOO,QAAQ,oBAAoBF,QAAeC,OAC3DJ,QAAQC,IAAI,sBAAoBE,QAAeC,MAAU,GACzD,GAZa,KA5BE,IA2CbrB,GACEuB,cAAcxB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', createPromise);\n\n// let timerId = null;\n// let position = 10;\n// const delay = Number(refs.form.elements.delay.value);\n\n// function createPromise() {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       resolve({ position, delay });\n//     }\n//     reject({ position, delay });\n//   }, delay);\n// }\n\n// createPromise()\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nlet timerId = null;\n\n  let position = 0;\n  const delay = 1000;\n  const amount = 5;\n\n\nconst p = new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n\n\n  setInterval(() => {\n    position += 1;\n if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  }, delay)\n   \n    \n\n\n});\n\nfunction createPromise(event) {\n  event.preventDefault();\n\n\n}\n\n\n  const step = 500;\n\n\n   timerId = setInterval(() => {\n    \n\n  p.then(({ position, delay }) => {\n  Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}).catch(({ position, delay }) => {\n  Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n});\n  }, step);\n\nif (position === amount) {\n      clearInterval(timerId);\n    }\n  \n  "],"names":["$7Y9D8","parcelRequire","form","document","querySelector","addEventListener","event","preventDefault","$47d4ff9957288465$var$timerId","$47d4ff9957288465$var$position","$47d4ff9957288465$var$p","Promise","resolve","reject","shouldResolve","Math","random","setInterval","then","position","position1","delay","delay1","$parcel$interopDefault","Notify","success","console","log","catch","position2","delay2","failure","clearInterval"],"version":3,"file":"03-promises.44ea2c8d.js.map"}