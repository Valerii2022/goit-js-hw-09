{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAG/BH,EAAKC,KAAKG,iBAAiB,UAK3B,SAA2BC,GACzBA,EAAMC,iBACN,IAAIC,EAAQC,OAAOR,EAAKC,KAAKQ,SAASC,MAAMC,OAC5C,MAAMC,EAASJ,OAAOR,EAAKC,KAAKQ,SAASG,OAAOD,OAC1CE,EAAOL,OAAOR,EAAKC,KAAKQ,SAASI,KAAKF,OAE5CG,YAAW,KACTC,EAAUC,aAAY,KAwB1B,IAAuBC,EAAUP,EAvB3BQ,GAAY,GAuBKD,EArBHC,EAqBaR,EArBHH,EAsBrB,IAAIY,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCH,EAAQ,CAAEI,SAAAP,E,MAAUP,IAEpBW,EAAO,CAAEG,SAAAP,E,MAAUP,GAAQ,KA1BxBe,MAAK,EAAGD,SAAAE,EAAQhB,MAAEA,MACjBiB,EAAA7B,GAAS8B,OAAOC,QACd,qBAAqBH,QAAehB,OAEtCoB,QAAQC,IAAI,uBAAqBL,QAAiBhB,MAAU,IAE7DsB,OAAM,EAAGR,SAAAS,EAAQvB,MAAEA,MAClBiB,EAAA7B,GAAS8B,OAAOM,QAAQ,oBAAoBD,QAAevB,OAC3DoB,QAAQC,IAAI,sBAAoBE,QAAevB,MAAU,IAGzDQ,GAAYN,GACduB,cAAcpB,GAGhBR,GAASM,CAAI,GACZA,EAAK,GACPN,E,IA/BL,IAAIQ,EAAU,KACVG,EAAW","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', handleinputSubmit);\n\nlet timerId = null;\nlet position = 0;\n\nfunction handleinputSubmit(event) {\n  event.preventDefault();\n  let delay = Number(refs.form.elements.delay.value);\n  const amount = Number(refs.form.elements.amount.value);\n  const step = Number(refs.form.elements.step.value);\n\n  setTimeout(() => {\n    timerId = setInterval(() => {\n      position += 1;\n\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `Fulfilled promise ${position} in ${delay}ms`\n          );\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n\n      if (position == amount) {\n        clearInterval(timerId);\n      }\n\n      delay += step;\n    }, step);\n  }, delay);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","addEventListener","event","preventDefault","delay1","Number","elements","delay","value","amount","step","setTimeout","$47d4ff9957288465$var$timerId","setInterval","position3","$47d4ff9957288465$var$position","Promise","resolve","reject","Math","random","position","then","position1","$parcel$interopDefault","Notify","success","console","log","catch","position2","failure","clearInterval"],"version":3,"file":"03-promises.e98bb0bd.js.map"}